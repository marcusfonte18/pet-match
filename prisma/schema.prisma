// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String
  birthdate    DateTime
  phone        String
  address      String?
  city         String?
  number       String?
  cep          String?
  pet          Pet[]
  match        Match[]
  preference   Preference?
  interactions Interaction[]

  @@map("user")
}

model Preference {
  id     String  @id @default(uuid())
  userId String  @unique
  breed  String?
  specie String?
  ageMin Int?
  ageMax Int?
  user   User    @relation(fields: [userId], references: [id])

  @@map("preference")
}

model Pet {
  id          String        @id @default(uuid())
  name        String
  specie      String
  breed       String
  age         Int?
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  match       Match[]
  Interaction Interaction[]

  @@map("pet")
}

model Match {
  id      String   @id @default(uuid())
  pet     Pet      @relation(fields: [petId], references: [id])
  petId   String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  status  String
  message String?
  date    DateTime

  @@map("match")
}

model Interaction {
  id     String   @id @default(uuid())
  pet    Pet      @relation(fields: [petId], references: [id])
  petId  String
  user   User     @relation(fields: [userId], references: [id])
  userId String
  action String // "LIKE" ou "DISLIKE"
  date   DateTime @default(now())

  @@map("interaction")
}
